package product

import "github.com/mluksic/product-price-tracker/types"
import "github.com/mluksic/product-price-tracker/views/layout"
import "fmt"


templ Show(products []types.Product) {
	@layout.Base() {
	    <div class="mx-8 my-10">
            <div id="alert" class="mb-5"></div>

	        <div class="flex justify-between">
	            <div class="pb-7" >
	                <h3 class="text-4xl font-extrabold">Products</h3>
	            </div>

	            <div>
                    <button hx-target="#dialog" hx-on:click="modal.showModal()" hx-trigger="click" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                      Track new price
                    </button>
                    <dialog id="modal" class="modal fade">
                      <div id="dialog" class="modal-dialog" hx-target="this">
                          <!-- Modal header -->
                          <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                  Track new price
                              </h3>
                              <button hx-on:click="modal.close()" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                                  <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                                  </svg>
                                  <span class="sr-only">Close modal</span>
                              </button>
                          </div>

                          <!-- Modal body -->
                          <form class="p-4 md:p-5" name="form-creation" hx-on::after-request="this.reset()">
                              <div class="grid gap-4 mb-4 grid-cols-2">
                                  <div class="col-span-2">
                                      <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
                                      <input type="email" name="name" id="name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Type product name" required />
                                  </div>
                                  <div class="col-span-2">
                                      <label for="url" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">URL</label>
                                      <input type="url" name="url" id="url" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Type website URL" required />
                                  </div>
                              </div>

                              <button hx-post="products" hx-target="#alert" hx-on::after-request="modal.close(); setTimeout(function () {document.getElementById('alert-inner').remove();}, 5000);" type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                  @plusSign()
                                   Track
                              </button>
                          </form>
                      </div>
                    </dialog>
	            </div>

	        </div>

            <div>
                @table(products)
            </div>
	        <div id="product-prices">

	        </div>
	    </div>

	}
}

templ table(products []types.Product) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">
						Product name
					</th>
					<th scope="col" class="px-6 py-3">
						URL
					</th>
					<th scope="col" class="px-6 py-3">
						Tracked
					</th>
					<th scope="col" class="px-6 py-3">
						Created
					</th>
					<th scope="col" class="px-6 py-3">
						Updated
					</th>
					<th scope="col" class="px-6 py-3">
						Actions
					</th>
				</tr>
			</thead>
			<tbody>
				for _, product := range products {
					<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
						<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
							{ product.Name }
						</th>
						<td class="px-6 py-4">
							{ product.Url }
						</td>
						<td class="px-6 py-4">
						    if product.IsTracked {
						        @greenSign()
						    } else {
						        @redSign()
						    }
						</td>
						<td class="px-6 py-4">
							{ product.CreatedAt.Format("2006-01-02") }
						</td>
						<td class="px-6 py-4">
							{ product.UpdatedAt.Format("2006-01-02") }
						</td>
						<td class="px-6 py-4">
						    @actionButtons(product)
                        </td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ actionButtons(product types.Product) {
    <button hx-get={ fmt.Sprintf("products/%d", product.ID) } hx-target="#product-prices" hx-swap="innerHTML show:top" class="focus:ring-2 focus:ring-offset-2 focus:ring-red-300 text-sm leading-none text-gray-600 py-3 px-5 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none">View</button>
    <button hx-post={ fmt.Sprintf("products/%d/scrape", product.ID) } class="focus:ring-2 focus:ring-offset-2 focus:ring-red-300 text-sm leading-none text-blue-600 py-3 px-5 bg-blue-100 rounded hover:bg-blue-200 focus:outline-none">Scrape</button>
    if product.IsTracked {
        <button hx-put={ fmt.Sprintf("products/%d/track", product.ID) } hx-target="#alert" hx-on::after-request="setTimeout(function () {document.getElementById('alert').remove();}, 5000);"class="focus:ring-2 focus:ring-offset-2 focus:ring-yellow-300 text-sm leading-none text-yellow-600 py-3 px-5 bg-yellow-100 rounded hover:bg-yellow-200 focus:outline-none">Un-track</button>
    } else {
        <button hx-put={ fmt.Sprintf("products/%d/track", product.ID) } hx-target="#alert"  hx-on::after-request="setTimeout(function () {document.getElementById('alert').remove();}, 5000);"class="focus:ring-2 focus:ring-offset-2 focus:ring-yellow-300 text-sm leading-none text-yellow-600 py-3 px-5 bg-yellow-100 rounded hover:bg-yellow-200 focus:outline-none">Track</button>
    }
    <button hx-delete={ fmt.Sprintf("products/%d", product.ID) } hx-confirm="Are you sure?" hx-target="closest tr" hx-swap="outerHTML swap:0.5s" class="focus:ring-2 focus:ring-offset-2 focus:ring-red-300 text-sm leading-none text-red-600 py-3 px-5 bg-red-100 rounded hover:bg-red-200 focus:outline-none">Delete</button>
}

templ greenSign() {
    <span class="flex justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
    </span>
}

templ redSign() {
    <span class="flex justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
    </span>
}

templ plusSign() {
    <svg class="me-1 -ms-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
}

templ ItemCreatedAlert(success bool, msg string) {
    if success {
        <div id="alert-inner" class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
            <p class="text-lg font-semibold">Success!</p>
            <p>{ msg }</p>
        </div>
    } else {
        <div id="alert-inner" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg">
            <p class="text-lg font-semibold">Failed!</p>
            <p>Ohh no, something went wrong - { msg }</p>
        </div>
    }
}

templ ProductPricesTable(productPrices []types.ProductPrice) {
    <div class="pb-7" >
        <h3 class="text-4xl font-extrabold">Product prices</h3>
    </div>

    <table class="w-full table-auto border-collapse">
        <thead>
        <tr>
            <th class="px-4 py-2 bg-gray-200 text-left">Price</th>
            <th class="px-4 py-2 bg-gray-200 text-left">Fetched at</th>
        </tr>
        </thead>
        <tbody>
        for _, price := range productPrices {
            <tr class="border-t border-gray-200">
                <td class="px-4 py-2">{ string(price.Price) } €</td>
                <td class="px-4 py-2">{ price.FetchedAt.Format("2006-01-02 15:04:05")}</td>
            </tr>
        }
        </tbody>
    </table>
}
