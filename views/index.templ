package views

import "github.com/mluksic/product-price-tracker/util"
import "github.com/mluksic/product-price-tracker/types"
import "github.com/mluksic/product-price-tracker/components"

templ Show(products []types.Product) {
	@Page(true) {
	    <div class="mx-8 my-10">
            <div id="alert" class="mb-5">
            </div>

	        <div class="flex justify-between">
	            <div class="pb-7" >
	                <h3 class="text-4xl font-extrabold">Products</h3>
	            </div>

	            <div>
                    @components.Modal()
	            </div>
	        </div>

            <div>
                @table(products)
            </div>
	        <div id="product-prices">
	        </div>
	    </div>
	}
}

templ table(products []types.Product) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">
						Product name
					</th>
					<th scope="col" class="px-6 py-3">
						URL
					</th>
					<th scope="col" class="px-6 py-3">
						Tracked
					</th>
					<th scope="col" class="px-6 py-3">
						Created
					</th>
					<th scope="col" class="px-6 py-3">
						Updated
					</th>
					<th scope="col" class="px-6 py-3">
						Actions
					</th>
				</tr>
			</thead>
			<tbody>
				for _, product := range products {
					<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
						<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
							{ product.Name }
						</th>
						<td class="px-6 py-4">
							{ product.Url }
						</td>
						<td class="px-6 py-4">
						    if product.IsTracked {
						        @components.GreenSign()
						    } else {
						        @components.RedSign()
						    }
						</td>
						<td class="px-6 py-4">
							{ product.CreatedAt.Format("2006-01-02") }
						</td>
						<td class="px-6 py-4">
							{ product.UpdatedAt.Format("2006-01-02") }
						</td>
						<td class="px-6 py-4">
						    @components.ActionButtons(product)
                        </td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ ProductPricesTable(productPrices []types.ProductPrice) {
    <div class="pb-7" >
        <h3 class="text-4xl font-extrabold">Product prices</h3>
    </div>

    <table class="w-full table-auto border-collapse">
        <thead>
        <tr>
            <th class="px-4 py-2 bg-gray-200 text-left">Price</th>
            <th class="px-4 py-2 bg-gray-200 text-left">Fetched at</th>
        </tr>
        </thead>
        <tbody>
        for _, price := range productPrices {
            <tr class="border-t border-gray-200">
                <td class="px-4 py-2">{ util.CentsToEuros(price.Price) } â‚¬</td>
                <td class="px-4 py-2">{ price.FetchedAt.Format("2006-01-02 15:04:05")}</td>
            </tr>
        }
        </tbody>
    </table>
}
